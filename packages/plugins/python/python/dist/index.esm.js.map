{"version":3,"file":"index.esm.js","sources":["../../../dist/plugins/python/common/variables-to-object.js","../../../dist/plugins/python/common/declaration-block.js","../../../dist/plugins/python/common/scalars.js","../../../dist/plugins/python/common/keywords.js","../../../dist/plugins/python/python/src/visitor.js","../../../dist/plugins/python/python/src/introspection-visitor.js","../../../dist/plugins/python/python/src/index.js"],"sourcesContent":["import { OperationVariablesToObject, } from '@graphql-codegen/visitor-plugin-common';\nimport { Kind } from 'graphql';\nexport class PythonOperationVariablesToObject extends OperationVariablesToObject {\n    constructor(_scalars, _convertName, _namespacedImportName = null, _enumNames = [], _enumPrefix = true, _enumValues = {}) {\n        super(_scalars, _convertName, _namespacedImportName, _enumNames, _enumPrefix, _enumValues);\n    }\n    clearOptional(str) {\n        // const prefix = this._namespacedImportName ? `${this._namespacedImportName}.` : \"\";\n        const rgx = new RegExp(`^Optional\\\\[(.*?)\\\\]$`, 'i');\n        if (str.startsWith(`${this._namespacedImportName ? `${this._namespacedImportName}.` : ''}Optional`)) {\n            return str.replace(rgx, '$1');\n        }\n        return str;\n    }\n    wrapAstTypeWithModifiers(baseType, typeNode) {\n        const prefix = this._namespacedImportName ? `${this._namespacedImportName}.` : '';\n        if (typeNode.kind === Kind.NON_NULL_TYPE) {\n            const type = this.wrapAstTypeWithModifiers(baseType, typeNode.type);\n            return this.clearOptional(type);\n        }\n        else if (typeNode.kind === Kind.LIST_TYPE) {\n            const innerType = this.wrapAstTypeWithModifiers(baseType, typeNode.type);\n            return `${prefix}Optional[List[${innerType}]]`;\n        }\n        else {\n            return `${prefix}Optional[\"${baseType}\"]`;\n        }\n    }\n    formatFieldString(fieldName, isNonNullType, hasDefaultValue) {\n        return fieldName;\n    }\n    getScalar(name) {\n        const prefix = this._namespacedImportName ? `${this._namespacedImportName}.` : '';\n        return `${prefix}Scalar${name}`;\n    }\n    formatTypeString(fieldType, isNonNullType, hasDefaultValue) {\n        if (!hasDefaultValue && isNonNullType) {\n            return this.clearOptional(fieldType);\n        }\n        return fieldType;\n    }\n    getPunctuation() {\n        return '';\n    }\n}\n//# sourceMappingURL=variables-to-object.js.map","import { DeclarationBlock, indent, isStringValueNode, } from '@graphql-codegen/visitor-plugin-common';\nexport function transformPythonComment(comment, indentLevel = 0) {\n    if (!comment || comment === '') {\n        return '';\n    }\n    if (isStringValueNode(comment)) {\n        comment = comment.value;\n    }\n    comment = comment.split('*/').join('*\\\\/');\n    let lines = comment.split('\\n');\n    if (lines.length === 1) {\n        return indent(`# ${lines[0]}\\n`, indentLevel);\n    }\n    lines = [`\"\"\"`, ...lines, `\"\"\"\\n`];\n    return lines.map(line => indent(line, indentLevel)).join('\\n');\n}\nexport class PythonDeclarationBlock extends DeclarationBlock {\n    constructor(_config) {\n        super({\n            enumNameValueSeparator: '=',\n            ..._config,\n        });\n    }\n    withComment(comment) {\n        const nonEmptyComment = isStringValueNode(comment) ? !!comment.value : !!comment;\n        if (nonEmptyComment) {\n            this._comment = transformPythonComment(comment, 0);\n        }\n        return this;\n    }\n    get string() {\n        let result = '';\n        if (this._decorator) {\n            result += this._decorator + '\\n';\n        }\n        if (this._kind && this._kind !== 'union') {\n            result += 'class ';\n        }\n        const name = this._name + (this._nameGenerics || '');\n        if (name) {\n            result += name;\n        }\n        switch (this._kind) {\n            case 'enum':\n                result += '(Enum)';\n                break;\n            case 'union':\n                result += ' = Union[';\n                break;\n            default:\n                break;\n        }\n        if (this._block) {\n            if (this._content) {\n                result += this._content;\n            }\n            const blockWrapper = this._ignoreBlockWrapper ? '' : this._config.blockWrapper;\n            const before = ':' + blockWrapper;\n            let after = blockWrapper;\n            if (this._kind !== 'scalar') {\n                after += `\\n__GQL_CODEGEN_${name}__ = ${name}`;\n            }\n            const block = [before, this._block, after].filter(val => !!val).join('\\n');\n            if (this._methodName) {\n                result += `${this._methodName}(${this._config.blockTransformer(block)})`;\n            }\n            else {\n                result += this._config.blockTransformer(block);\n            }\n        }\n        else if (this._content) {\n            result += this._content;\n            if (this._kind && this._kind === 'union') {\n                result += ']';\n            }\n            result += `\\n__GQL_CODEGEN_${name}__ = ${name}`;\n        }\n        return (this._comment ? this._comment : '') + result + '\\n';\n    }\n}\n//# sourceMappingURL=declaration-block.js.map","export const PYTHON_SCALARS = {\n    ID: 'str',\n    String: 'str',\n    Boolean: 'bool',\n    Int: 'int',\n    Float: 'float',\n};\nexport const pythonNativeValueTypes = [\n    'bool',\n    'byte',\n    'sbyte',\n    'char',\n    'decimal',\n    'double',\n    'float',\n    'int',\n    'uint',\n    'long',\n    'ulong',\n    'short',\n    'ushort',\n];\n//# sourceMappingURL=scalars.js.map","/**\n * C# keywords\n * https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/\n */\nexport const csharpKeywords = [\n    'abstract',\n    'as',\n    'and',\n    'or',\n    'not',\n    'from',\n    'None',\n    'base',\n    'bool',\n    'break',\n    'byte',\n    'case',\n    'catch',\n    'char',\n    'checked',\n    'class',\n    'const',\n    'continue',\n    'decimal',\n    'default',\n    'delegate',\n    'do',\n    'double',\n    'else',\n    'enum',\n    'event',\n    'explicit',\n    'extern',\n    'false',\n    'finally',\n    'fixed',\n    'float',\n    'for',\n    'foreach',\n    'goto',\n    'if',\n    'implicit',\n    'in',\n    'int',\n    'interface',\n    'internal',\n    'is',\n    'lock',\n    'long',\n    'namespace',\n    'new',\n    'null',\n    'object',\n    'operator',\n    'out',\n    'override',\n    'params',\n    'private',\n    'protected',\n    'public',\n    'readonly',\n    'ref',\n    'return',\n    'sbyte',\n    'sealed',\n    'short',\n    'sizeof',\n    'stackalloc',\n    'static',\n    'string',\n    'struct',\n    'switch',\n    'this',\n    'throw',\n    'true',\n    'try',\n    'typeof',\n    'uint',\n    'ulong',\n    'unchecked',\n    'unsafe',\n    'ushort',\n    'using',\n    'virtual',\n    'void',\n    'volatile',\n    'while',\n];\n//# sourceMappingURL=keywords.js.map","import { wrapWithSingleQuotes, indent, BaseTypesVisitor, buildScalars, getConfigValue, } from '@graphql-codegen/visitor-plugin-common';\nimport autoBind from 'auto-bind';\nimport { isEnumType, } from 'graphql';\nimport { PythonOperationVariablesToObject } from '../../common/variables-to-object';\nimport { PythonDeclarationBlock, transformPythonComment } from '../../common/declaration-block';\nimport { PYTHON_SCALARS } from '../../common/scalars';\nimport { csharpKeywords } from '../../common/keywords';\nconst flatMap = require('array.prototype.flatmap');\nexport class PyVisitor extends BaseTypesVisitor {\n    constructor(schema, pluginConfig, additionalConfig = {}) {\n        super(schema, {\n            ...pluginConfig,\n            declarationKind: {\n                scalar: 'scalar',\n            },\n        }, {\n            ...additionalConfig,\n            scalars: buildScalars(schema, pluginConfig.scalars, PYTHON_SCALARS, 'Any'),\n            typenameAsString: getConfigValue(pluginConfig.typenameAsString, false),\n        }, PYTHON_SCALARS);\n        this.keywords = new Set(csharpKeywords);\n        autoBind(this);\n        const enumNames = Object.values(schema.getTypeMap())\n            .filter(isEnumType)\n            .map(type => type.name);\n        this.setArgumentsTransformer(new PythonOperationVariablesToObject(this.scalars, this.convertName, null, enumNames, pluginConfig.enumPrefix, this.config.enumValues));\n        this.setDeclarationBlockConfig({\n            enumNameValueSeparator: ' =',\n            ignoreExport: true,\n        });\n    }\n    convertSafeName(node) {\n        const name = typeof node === 'string' ? node : node.value;\n        return this.keywords.has(name) ? `_${name}` : name;\n    }\n    getWrapperDefinitions() {\n        return [];\n    }\n    getScalarsImports() {\n        let typingImport = `from typing import Optional, List, Union, Any`;\n        if (!this.config.typenameAsString) {\n            typingImport += ', Literal';\n        }\n        return [typingImport, 'from enum import Enum', ...super.getScalarsImports()];\n    }\n    _getScalar(name) {\n        return `Scalar${name}`;\n    }\n    get scalarsDefinition() {\n        const allScalars = Object.keys(this.config.scalars).map(scalarName => {\n            const scalarValue = this.config.scalars[scalarName].type;\n            const scalarType = this._schema.getType(scalarName);\n            const comment = scalarType && scalarType.astNode && scalarType.description\n                ? transformPythonComment(scalarType.description, 0)\n                : '';\n            return comment + `Scalar${scalarName} = ${scalarValue}`;\n        });\n        return allScalars.join('\\n') + '\\n';\n    }\n    clearOptional(str) {\n        if (str.startsWith('Optional')) {\n            return str.replace(/Optional\\[(.*?)\\]$/, '$1');\n        }\n        return str;\n    }\n    getExportPrefix() {\n        return '';\n    }\n    _getTypeForNode(node) {\n        const typeAsString = node.name;\n        if (this.scalars[typeAsString] || this.config.enumValues[typeAsString]) {\n            return super._getTypeForNode(node);\n        }\n        else {\n            return `\"__GQL_CODEGEN_${super._getTypeForNode(node)}__\"`;\n        }\n    }\n    NamedType(node, key, parent, path, ancestors) {\n        const name = super.NamedType(node, key, parent, path, ancestors);\n        return `Optional[${name.includes('__GQL_CODEGEN') ? name : `\"${name}\"`}]`;\n    }\n    ListType(node) {\n        return `Optional[${super.ListType(node)}]`;\n    }\n    wrapWithListType(str) {\n        return `${this.config.immutableTypes ? 'List' : 'List'}[${str}]`;\n    }\n    NonNullType(node) {\n        const baseValue = super.NonNullType(node);\n        return this.clearOptional(baseValue);\n    }\n    getObjectTypeDeclarationBlock(node, originalNode) {\n        const { type } = this._parsedConfig.declarationKind;\n        const allFields = [...node.fields];\n        if (this.config.addTypename) {\n            const typename = node.name;\n            const typeString = this.config.typenameAsString ? 'Scalars.String' : `Literal[\"${typename}\"]`;\n            const type = this.config.nonOptionalTypename ? typeString : `Optional[${typeString}]`;\n            allFields.unshift(indent(`__typename: ${type}`));\n        }\n        const interfacesNames = []; // originalNode.interfaces ? originalNode.interfaces.map(i => this.convertName(i)) : [];\n        const declarationBlock = new PythonDeclarationBlock({\n            ...this._declarationBlockConfig,\n        })\n            .export()\n            .asKind('class')\n            .withName(this.convertName(node))\n            .withComment(node.description);\n        if (type === 'interface' || type === 'class') {\n            if (interfacesNames.length > 0) {\n                declarationBlock.withContent(' extends ' + interfacesNames.join(', ') + (allFields.length > 0 ? ' ' : ' {}'));\n            }\n            declarationBlock.withBlock(this.mergeAllFields(allFields, false));\n        }\n        else {\n            this.appendInterfacesAndFieldsToBlock(declarationBlock, interfacesNames, allFields);\n        }\n        return declarationBlock;\n    }\n    FieldDefinition(node, key, parent) {\n        const typeString = node.type;\n        const comment = this.getFieldComment(node);\n        const { type } = this.config.declarationKind;\n        return (comment +\n            indent(`${this.config.immutableTypes ? 'readonly ' : ''}${this.convertSafeName(node.name)}: ${typeString}${this.getPunctuation(type)}`));\n    }\n    getInputObjectDeclarationBlock(node) {\n        return new PythonDeclarationBlock(this._declarationBlockConfig)\n            .export()\n            .withDecorator('@dataclass')\n            .asKind(this._parsedConfig.declarationKind.input)\n            .withName(this.convertName(node))\n            .withComment(node.description)\n            .withBlock(node.fields.join('\\n'));\n    }\n    getArgumentsObjectDeclarationBlock(node, name, field) {\n        return new PythonDeclarationBlock(this._declarationBlockConfig)\n            .export()\n            .asKind(this._parsedConfig.declarationKind.arguments)\n            .withName(this.convertName(name))\n            .withComment(node.description)\n            .withBlock(this._argumentsTransformer.transform(field.arguments));\n    }\n    getFieldComment(node) {\n        let commentText = node.description;\n        const deprecationDirective = node.directives.find((v) => v.name === 'deprecated');\n        if (deprecationDirective) {\n            const deprecationReason = this.getDeprecationReason(deprecationDirective);\n            commentText = `${commentText ? `${commentText}\\n` : ''}@deprecated ${deprecationReason}`;\n        }\n        const comment = transformPythonComment(commentText, 1);\n        return comment;\n    }\n    InputValueDefinition(node) {\n        const comment = transformPythonComment(node.description, 1);\n        return comment + indent(`${this.convertSafeName(node.name)}: ${node.type}`);\n    }\n    buildEnumValuesBlock(typeName, values) {\n        return values\n            .map(enumOption => {\n            const optionName = this.convertName(enumOption, {\n                useTypesPrefix: false,\n                transformUnderscore: true,\n            });\n            const comment = transformPythonComment(enumOption.description, 1);\n            let enumValue = enumOption.name;\n            if (this.config.enumValues[typeName] &&\n                this.config.enumValues[typeName].mappedValues &&\n                typeof this.config.enumValues[typeName].mappedValues[enumValue] !== 'undefined') {\n                enumValue = this.config.enumValues[typeName].mappedValues[enumValue];\n            }\n            return (comment +\n                indent(`${this.convertSafeName(optionName)}${this._declarationBlockConfig.enumNameValueSeparator} ${wrapWithSingleQuotes(enumValue)}`));\n        })\n            .join('\\n');\n    }\n    getInterfaceTypeDeclarationBlock(node, originalNode) {\n        const declarationBlock = new PythonDeclarationBlock({})\n            .export()\n            .asKind(this._parsedConfig.declarationKind.interface)\n            .withName(this.convertName(node))\n            .withComment(node.description);\n        return declarationBlock.withBlock(node.fields.join('\\n'));\n    }\n    mergeInterfaces(interfaces) {\n        if (interfaces.length === 0)\n            return '';\n        return `(${interfaces.join(', ')})`;\n    }\n    _buildTypeImport(identifier, source) {\n        return `from ${source} import ${identifier}`;\n    }\n    handleEnumValueMapper(typeIdentifier, importIdentifier, sourceIdentifier, sourceFile) {\n        const importStatement = this._buildTypeImport(importIdentifier || sourceIdentifier, sourceFile);\n        if (importIdentifier !== sourceIdentifier || sourceIdentifier !== typeIdentifier) {\n            return [importStatement, `${typeIdentifier} = ${sourceIdentifier}`];\n        }\n        return [importStatement];\n    }\n    getEnumsImports() {\n        return flatMap(Object.keys(this.config.enumValues), enumName => {\n            const mappedValue = this.config.enumValues[enumName];\n            if (mappedValue.sourceFile) {\n                return this.handleEnumValueMapper(mappedValue.typeIdentifier, mappedValue.importIdentifier, mappedValue.sourceIdentifier, mappedValue.sourceFile);\n            }\n            return [];\n        }).filter(a => a);\n    }\n    getDataclassesImports() {\n        return ['from dataclasses import dataclass'];\n    }\n    EnumTypeDefinition(node) {\n        const enumName = node.name;\n        // In case of mapped external enum string\n        if (this.config.enumValues[enumName] && this.config.enumValues[enumName].sourceFile) {\n            return '';\n        }\n        const enumTypeName = this.convertName(node, { useTypesPrefix: this.config.enumPrefix });\n        return new PythonDeclarationBlock(this._declarationBlockConfig)\n            .export()\n            .asKind('enum')\n            .withName(enumTypeName)\n            .withComment(node.description)\n            .withBlock(this.buildEnumValuesBlock(enumName, node.values)).string;\n    }\n    UnionTypeDefinition(node, key, parent) {\n        const originalNode = parent[key];\n        const possibleTypes = originalNode.types\n            .map(t => (this.scalars[t.name.value] ? this._getScalar(t.name.value) : this._getTypeForNode(t)))\n            .join(', ');\n        return new PythonDeclarationBlock(this._declarationBlockConfig)\n            .export()\n            .asKind('union')\n            .withName(this.convertName(node))\n            .withComment(node.description)\n            .withContent(possibleTypes).string;\n    }\n    getPunctuation(declarationKind) {\n        return '';\n    }\n}\n//# sourceMappingURL=visitor.js.map","import { PyVisitor } from './visitor';\nimport autoBind from 'auto-bind';\nexport class TsIntrospectionVisitor extends PyVisitor {\n    constructor(schema, pluginConfig = {}, typesToInclude) {\n        super(schema, pluginConfig);\n        this.typesToInclude = [];\n        this.typesToInclude = typesToInclude;\n        autoBind(this);\n    }\n    DirectiveDefinition() {\n        return null;\n    }\n    ObjectTypeDefinition(node, key, parent) {\n        const name = node.name;\n        if (this.typesToInclude.some(type => type.name === name)) {\n            return super.ObjectTypeDefinition(node, key, parent);\n        }\n        return null;\n    }\n    EnumTypeDefinition(node) {\n        const name = node.name;\n        if (this.typesToInclude.some(type => type.name === name)) {\n            return super.EnumTypeDefinition(node);\n        }\n        return null;\n    }\n}\n//# sourceMappingURL=introspection-visitor.js.map","import { parse, printSchema, visit, TypeInfo, visitWithTypeInfo, getNamedType, isIntrospectionType, printIntrospectionSchema, isObjectType, } from 'graphql';\nimport { PyVisitor } from './visitor';\nimport { TsIntrospectionVisitor } from './introspection-visitor';\nexport * from '../../common/variables-to-object';\nexport * from './visitor';\nexport * from './config';\nexport * from './introspection-visitor';\nexport const plugin = (schema, documents, config) => {\n    const visitor = new PyVisitor(schema, config);\n    const printedSchema = printSchema(schema);\n    const astNode = parse(printedSchema);\n    const visitorResult = visit(astNode, { leave: visitor });\n    const introspectionDefinitions = includeIntrospectionDefinitions(schema, documents, config);\n    const scalars = visitor.scalarsDefinition;\n    return {\n        prepend: [\n            ...visitor.getEnumsImports(),\n            ...visitor.getScalarsImports(),\n            ...visitor.getDataclassesImports(),\n            ...visitor.getWrapperDefinitions(),\n        ],\n        content: ['', scalars, ...visitorResult.definitions, ...introspectionDefinitions].join('\\n'),\n    };\n};\nexport function includeIntrospectionDefinitions(schema, documents, config) {\n    const typeInfo = new TypeInfo(schema);\n    const usedTypes = [];\n    const documentsVisitor = visitWithTypeInfo(typeInfo, {\n        Field() {\n            const type = getNamedType(typeInfo.getType());\n            if (isIntrospectionType(type) && !usedTypes.includes(type)) {\n                usedTypes.push(type);\n            }\n        },\n    });\n    documents.forEach(doc => visit(doc.document, documentsVisitor));\n    const typesToInclude = [];\n    usedTypes.forEach(type => {\n        collectTypes(type);\n    });\n    const visitor = new TsIntrospectionVisitor(schema, config, typesToInclude);\n    const result = visit(parse(printIntrospectionSchema(schema)), { leave: visitor });\n    // recursively go through each `usedTypes` and their children and collect all used types\n    // we don't care about Interfaces, Unions and others, but Objects and Enums\n    function collectTypes(type) {\n        if (typesToInclude.includes(type)) {\n            return;\n        }\n        typesToInclude.push(type);\n        if (isObjectType(type)) {\n            const fields = type.getFields();\n            Object.keys(fields).forEach(key => {\n                const field = fields[key];\n                const type = getNamedType(field.type);\n                collectTypes(type);\n            });\n        }\n    }\n    return result.definitions;\n}\n//# sourceMappingURL=index.js.map"],"names":[],"mappings":"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"}